Content based rec using only tags for 0.8 dataset achieves 0.033 score
Content based rec using only artist for 0.8 dataset achievees 0.04 score

Content based rec using only artist for 0.2 dataset achieves 0.024 score
Content based rec using only tags for 0.2 dataset achieves 0.01 score
Content based rec using artist(10) and tags(1) achieves 0.031 score
Content based rec using artist(100) and album(50) achieves 0.033 score
Content based rec using artist(100) and album(50) and tags(1) achieves 0.036 score
Content based rec using artist(50) and album(10) and tags(1) achieves 0.033 score

The idea of Hybrid system is to seperately improve each system, and then combine them to produce a better final result

cfu with artist[1] 0.0558
### LOG ###
[0.8] cfi [1, 0.074] cfu[1, 0.053] cb[1, 0.067] -> 0.076

MAP = 0.097287
MAP = 0.078673
MAP = 0.078539
MAP = 0.083083 bfr do not add cfu with cos sim and lambda_i = 0.00025 #iter = 15 TopK=100
MAP = 0.083105 bfr do not add cfu with cos sim and lambda_i = 0.00025 #iter = 15 TopK=200
MAP = 0.091344 bfr item-artist[1]-album[1] user #iter=25 lambda_i=0.0025 Topk=100


MAP = 0.088252 cfi with artist=1 album=0.2 TopK all = 500
for cfi adding tags does not increase performance

hybrid bfr[1]-0.103 cfi[1]-0.097325 => final 0.101047


2017-11-18
bfr 0.088970, cfi 0.085755, [1,1] 0.088390

2017-11-20
try with vstack artist and album
cfi.fit(combine_weight=1,artist=1, album=1)
-> MAP = 0.087
cfi.fit(combine_weight=0.5,artist=1, album=1)
-> MAP = 0.0887
cfi.fit(combine_weight=0.5,artist=1, album=1) with topK = 500
-> MAP = 0.088836
cfi.fit(combine_weight=0.5,artist=1, album=1,topk=2000)
-> MAP = 0.090327
cfi.fit(combine_weight=0.5,artist=1, album=1,topk=5000)
-> MAP = 0.090347
cfi.fit(combine_weight=0.8,artist=1, album=1,topk=2000)
-> MAP = 0.089466
cfi.fit(combine_weight=0.5,artist=2, album=1,topk=2000)
-> MAP = 0.088278
cfi.fit(combine_weight=0.4, artist=1, album=1,topk=3000)
-> MAP = 0.090677
cfi.fit(combine_weight=0.2, artist=1, album=1,topk=3000)
-> MAP = 0.090804
bfr.fit(n_iteration=15, topK=200, learning_rate=1e-3, lambda_i=0.0001, lambda_j=0.0001, combine_weight=[1,1], artist_weight=1, album_weight=0.3, artist_cfu_weight=0)
-> MAP = 0.092266
cfi.fit(combine_weight=0.2, artist=1, album=1,topk=3000)
-> MAP = 0.091733
=> MAP = 0.094237
*** using cos_similarity() function ***
cfi.fit(combine_weight=0.4, artist=1, album=1,topk=10000)
-> MAP = 0.0856
cfi.fit(combine_weight=1, artist=1, album=1)
-> MAP = 0.083892

CONCLUSION : using cos_similarity is not useful

2017-11-21
cfi.fit(tag_weight=1, combine_weight=0.2, artist=1, album=1,topk=3000)
-> MAP = 0.088451
using basic cfi with cos
-> MAP = 0.054376
using cos cython
-> MAP = 0.056896
cfi.fit(combine_weight=0.2, artist=1, album=1) using cos
-> MAP = 0.080259

2017-11-22
the orignal cfi version with cython sim topk=3000 -> MAP = 0.056
cfi version with cython sim topK=3000 -> MAP = 0.0624